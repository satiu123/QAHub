syntax = "proto3";

package notification;

option go_package = "./;notification";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

// NotificationService 定义通知中心的核心能力，包括列表查询、
// 标记已读、删除、未读统计以及实时订阅。
service NotificationService {
  // GetNotifications 按创建时间倒序返回用户的通知列表。
  rpc GetNotifications(GetNotificationsRequest)
      returns (GetNotificationsResponse) {
    option (google.api.http) = {
      get : "/api/v1/notifications"
    };
  }

  // MarkAsRead 支持批量或全部标记为已读。
  rpc MarkAsRead(MarkAsReadRequest) returns (MarkAsReadResponse) {
    option (google.api.http) = {
      post : "/api/v1/notifications/read"
      body : "*"
    };
  }

  // DeleteNotification 删除单条通知。
  rpc DeleteNotification(DeleteNotificationRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/api/v1/notifications/{notification_id}"
    };
  }

  // GetUnreadCount 返回指定用户的未读通知数量。
  rpc GetUnreadCount(GetUnreadCountRequest) returns (GetUnreadCountResponse) {
    option (google.api.http) = {
      get : "/api/v1/notifications/unread-count"
    };
  }

  // SubscribeNotifications 通过服务端流式推送实时通知，
  // 为 WebSocket 替代方案预留接口。
  rpc SubscribeNotifications(SubscribeNotificationsRequest)
      returns (stream Notification) {
    option (google.api.http) = {
      get : "/api/v1/notifications/stream"
    };
  }
}

// Notification 表示单条通知。
message Notification {
  string id = 1;                            // Mongo ObjectID 字符串表示
  int64 recipient_id = 2;                   // 接收者用户 ID
  int64 sender_id = 3;                      // 发送者用户 ID，可选
  string sender_name = 4;                   // 发送者用户名，可选
  string type = 5;                          // 通知类型，例如 comment、like
  string content = 6;                       // 通知内容
  string target_url = 7;                    // 点击通知跳转的链接
  bool is_read = 8;                         // 是否已读
  google.protobuf.Timestamp created_at = 9; // 创建时间
}

// GetNotificationsRequest 支持基于 limit/offset 的分页，可选过滤未读。
message GetNotificationsRequest {
  int64 user_id = 1;    // 服务间调用时可以直接传递；HTTP 网关可从认证信息填充
  int32 limit = 2;      // 每页数量，默认由服务端兜底
  int32 offset = 3;     // 偏移量
  bool unread_only = 4; // 是否只返回未读通知
}

message GetNotificationsResponse {
  repeated Notification notifications = 1;
  int64 total = 2;        // 总数，方便前端分页展示
  int64 unread_count = 3; // 未读数量
}

// MarkAsReadRequest 支持显式 ID 列表或直接全量标记。
message MarkAsReadRequest {
  int64 user_id = 1;
  repeated string notification_ids = 2; // 为空且 mark_all=true 时标记全部
  bool mark_all = 3;
}

message MarkAsReadResponse { int64 modified_count = 1; }

message DeleteNotificationRequest {
  int64 user_id = 1;
  string notification_id = 2;
}

message GetUnreadCountRequest { int64 user_id = 1; }

message GetUnreadCountResponse { int64 unread_count = 1; }

message SubscribeNotificationsRequest { int64 user_id = 1; }

// NotificationEvent 用于 Kafka 等内部事件流的载荷定义。
message NotificationEvent {
  int64 recipient_id = 1;
  int64 sender_id = 2;
  string sender_name = 3;
  string type = 4;
  string content = 5;
  string target_url = 6;
}
