// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.0
// source: api/proto/qa/qa.proto

package qa

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	QAService_CreateQuestion_FullMethodName = "/qa.QAService/CreateQuestion"
	QAService_GetQuestion_FullMethodName    = "/qa.QAService/GetQuestion"
	QAService_ListQuestions_FullMethodName  = "/qa.QAService/ListQuestions"
	QAService_UpdateQuestion_FullMethodName = "/qa.QAService/UpdateQuestion"
	QAService_DeleteQuestion_FullMethodName = "/qa.QAService/DeleteQuestion"
	QAService_CreateAnswer_FullMethodName   = "/qa.QAService/CreateAnswer"
	QAService_UpdateAnswer_FullMethodName   = "/qa.QAService/UpdateAnswer"
	QAService_DeleteAnswer_FullMethodName   = "/qa.QAService/DeleteAnswer"
)

// QAServiceClient is the client API for QAService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 问答服务定义
type QAServiceClient interface {
	// --- 问题相关 (Question RPCs) ---
	// 创建新问题
	CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*Question, error)
	// 获取问题详情（包括所有回答）
	GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*GetQuestionResponse, error)
	// 获取问题列表（分页）
	ListQuestions(ctx context.Context, in *ListQuestionsRequest, opts ...grpc.CallOption) (*ListQuestionsResponse, error)
	// 更新问题
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*Question, error)
	// 删除问题
	DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// --- 回答相关 (Answer RPCs) ---
	// 创建新回答
	CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*Answer, error)
	// 更新回答
	UpdateAnswer(ctx context.Context, in *UpdateAnswerRequest, opts ...grpc.CallOption) (*Answer, error)
	// 删除答案
	DeleteAnswer(ctx context.Context, in *DeleteAnswerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type qAServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQAServiceClient(cc grpc.ClientConnInterface) QAServiceClient {
	return &qAServiceClient{cc}
}

func (c *qAServiceClient) CreateQuestion(ctx context.Context, in *CreateQuestionRequest, opts ...grpc.CallOption) (*Question, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Question)
	err := c.cc.Invoke(ctx, QAService_CreateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAServiceClient) GetQuestion(ctx context.Context, in *GetQuestionRequest, opts ...grpc.CallOption) (*GetQuestionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuestionResponse)
	err := c.cc.Invoke(ctx, QAService_GetQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAServiceClient) ListQuestions(ctx context.Context, in *ListQuestionsRequest, opts ...grpc.CallOption) (*ListQuestionsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListQuestionsResponse)
	err := c.cc.Invoke(ctx, QAService_ListQuestions_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAServiceClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*Question, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Question)
	err := c.cc.Invoke(ctx, QAService_UpdateQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAServiceClient) DeleteQuestion(ctx context.Context, in *DeleteQuestionRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QAService_DeleteQuestion_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAServiceClient) CreateAnswer(ctx context.Context, in *CreateAnswerRequest, opts ...grpc.CallOption) (*Answer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Answer)
	err := c.cc.Invoke(ctx, QAService_CreateAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAServiceClient) UpdateAnswer(ctx context.Context, in *UpdateAnswerRequest, opts ...grpc.CallOption) (*Answer, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Answer)
	err := c.cc.Invoke(ctx, QAService_UpdateAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *qAServiceClient) DeleteAnswer(ctx context.Context, in *DeleteAnswerRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, QAService_DeleteAnswer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QAServiceServer is the server API for QAService service.
// All implementations must embed UnimplementedQAServiceServer
// for forward compatibility.
//
// 问答服务定义
type QAServiceServer interface {
	// --- 问题相关 (Question RPCs) ---
	// 创建新问题
	CreateQuestion(context.Context, *CreateQuestionRequest) (*Question, error)
	// 获取问题详情（包括所有回答）
	GetQuestion(context.Context, *GetQuestionRequest) (*GetQuestionResponse, error)
	// 获取问题列表（分页）
	ListQuestions(context.Context, *ListQuestionsRequest) (*ListQuestionsResponse, error)
	// 更新问题
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*Question, error)
	// 删除问题
	DeleteQuestion(context.Context, *DeleteQuestionRequest) (*emptypb.Empty, error)
	// --- 回答相关 (Answer RPCs) ---
	// 创建新回答
	CreateAnswer(context.Context, *CreateAnswerRequest) (*Answer, error)
	// 更新回答
	UpdateAnswer(context.Context, *UpdateAnswerRequest) (*Answer, error)
	// 删除答案
	DeleteAnswer(context.Context, *DeleteAnswerRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedQAServiceServer()
}

// UnimplementedQAServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedQAServiceServer struct{}

func (UnimplementedQAServiceServer) CreateQuestion(context.Context, *CreateQuestionRequest) (*Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateQuestion not implemented")
}
func (UnimplementedQAServiceServer) GetQuestion(context.Context, *GetQuestionRequest) (*GetQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestion not implemented")
}
func (UnimplementedQAServiceServer) ListQuestions(context.Context, *ListQuestionsRequest) (*ListQuestionsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListQuestions not implemented")
}
func (UnimplementedQAServiceServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*Question, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedQAServiceServer) DeleteQuestion(context.Context, *DeleteQuestionRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteQuestion not implemented")
}
func (UnimplementedQAServiceServer) CreateAnswer(context.Context, *CreateAnswerRequest) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateAnswer not implemented")
}
func (UnimplementedQAServiceServer) UpdateAnswer(context.Context, *UpdateAnswerRequest) (*Answer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAnswer not implemented")
}
func (UnimplementedQAServiceServer) DeleteAnswer(context.Context, *DeleteAnswerRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAnswer not implemented")
}
func (UnimplementedQAServiceServer) mustEmbedUnimplementedQAServiceServer() {}
func (UnimplementedQAServiceServer) testEmbeddedByValue()                   {}

// UnsafeQAServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QAServiceServer will
// result in compilation errors.
type UnsafeQAServiceServer interface {
	mustEmbedUnimplementedQAServiceServer()
}

func RegisterQAServiceServer(s grpc.ServiceRegistrar, srv QAServiceServer) {
	// If the following call pancis, it indicates UnimplementedQAServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&QAService_ServiceDesc, srv)
}

func _QAService_CreateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAServiceServer).CreateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QAService_CreateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAServiceServer).CreateQuestion(ctx, req.(*CreateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAService_GetQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAServiceServer).GetQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QAService_GetQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAServiceServer).GetQuestion(ctx, req.(*GetQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAService_ListQuestions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListQuestionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAServiceServer).ListQuestions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QAService_ListQuestions_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAServiceServer).ListQuestions(ctx, req.(*ListQuestionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAService_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAServiceServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QAService_UpdateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAServiceServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAService_DeleteQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAServiceServer).DeleteQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QAService_DeleteQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAServiceServer).DeleteQuestion(ctx, req.(*DeleteQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAService_CreateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAServiceServer).CreateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QAService_CreateAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAServiceServer).CreateAnswer(ctx, req.(*CreateAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAService_UpdateAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAServiceServer).UpdateAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QAService_UpdateAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAServiceServer).UpdateAnswer(ctx, req.(*UpdateAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QAService_DeleteAnswer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteAnswerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QAServiceServer).DeleteAnswer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: QAService_DeleteAnswer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QAServiceServer).DeleteAnswer(ctx, req.(*DeleteAnswerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QAService_ServiceDesc is the grpc.ServiceDesc for QAService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QAService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "qa.QAService",
	HandlerType: (*QAServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateQuestion",
			Handler:    _QAService_CreateQuestion_Handler,
		},
		{
			MethodName: "GetQuestion",
			Handler:    _QAService_GetQuestion_Handler,
		},
		{
			MethodName: "ListQuestions",
			Handler:    _QAService_ListQuestions_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _QAService_UpdateQuestion_Handler,
		},
		{
			MethodName: "DeleteQuestion",
			Handler:    _QAService_DeleteQuestion_Handler,
		},
		{
			MethodName: "CreateAnswer",
			Handler:    _QAService_CreateAnswer_Handler,
		},
		{
			MethodName: "UpdateAnswer",
			Handler:    _QAService_UpdateAnswer_Handler,
		},
		{
			MethodName: "DeleteAnswer",
			Handler:    _QAService_DeleteAnswer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/proto/qa/qa.proto",
}
