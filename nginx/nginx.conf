upstream user_service {
    server user-service:8081;
}

upstream qa_service {
    server qa-service:8082;
}

upstream search_service {
    server search-service:8083;
}

upstream notification_service {
    server notification-service:8084;
}

server {
    listen 80;
    server_name localhost;

    # 认证子请求的 location
    location = /_auth {
        internal;
        proxy_pass http://user-service:8081/api/v1/auth/validate;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Authorization $http_authorization;
    }

    # WebSocket 认证子请求的 location (支持从查询参数提取 token)
    location = /_auth_ws {
        internal;
        proxy_pass http://user-service:8081/api/v1/auth/validate;
        proxy_pass_request_body off;
        proxy_set_header Content-Length "";
        proxy_set_header X-Original-URI $request_uri;
        proxy_set_header Authorization $ws_auth_header;
    }

    # 代理到 user-service 的公开接口 (login, register)
    location ~ ^/api/v1/users/(login|register) {
        # 对于 OPTIONS 请求，直接通过（用于 CORS 预检）
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials "true" always;
            return 204;
        }
        
        proxy_pass http://user_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # 代理到 qa-service 的路由分发逻辑
    location ~ ^/api/v1/(questions|answers|comments) {
        # 对于 OPTIONS 请求，直接通过（用于 CORS 预检）
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials "true" always;
            return 204;
        }
        
        # 如果是写操作 (POST, PUT, DELETE), 内部重写到受保护的 location
        if ($request_method != GET) {
            rewrite ^ /_protected_qa$request_uri last;
        }

        # 如果是读操作 (GET), 直接代理到 qa_service
        # 注意：这个块只有在上面的 if 不匹配时才会执行
        proxy_pass http://qa_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # 内部命名 location，用于处理需要认证的 qa-service 请求
    location ~ ^/_protected_qa/api/v1/(questions|answers|comments) {
        internal;
        
        # 对于 OPTIONS 请求，直接通过（用于 CORS 预检）
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials "true" always;
            return 204;
        }
        
    auth_request /_auth;
    auth_request_set $auth_user_id $upstream_http_x_user_id;
    auth_request_set $auth_username $upstream_http_x_username;
    proxy_set_header X-User-ID $auth_user_id;
    proxy_set_header X-User-Name $auth_username;

        proxy_pass http://qa_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
    # 代理到 search-service 的搜索接口
    location ~ ^/api/v1/search {
        # 对于 OPTIONS 请求，直接通过（用于 CORS 预检）
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials "true" always;
            return 204;
        }
        
        proxy_pass http://search_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

        # 代理到 notification-service 的 WebSocket 接口
    location /api/v1/ws {
        # 从查询参数中提取token，并设置到Authorization请求头中
        set $ws_auth_header $http_authorization;
        if ($arg_token) {
            set $ws_auth_header "Bearer $arg_token";
        }

        auth_request /_auth_ws;
        auth_request_set $auth_user_id $upstream_http_x_user_id;
        auth_request_set $auth_username $upstream_http_x_username;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Name $auth_username;

        proxy_pass http://notification_service;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "Upgrade";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # 代理到 notification-service 的普通接口
    location ~ ^/api/v1/notifications {
        # 对于 OPTIONS 请求，直接通过（用于 CORS 预检）
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials "true" always;
            return 204;
        }

        auth_request /_auth;
        auth_request_set $auth_user_id $upstream_http_x_user_id;
        auth_request_set $auth_username $upstream_http_x_username;
        proxy_set_header X-User-ID $auth_user_id;
        proxy_set_header X-User-Name $auth_username;

        proxy_pass http://notification_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    # 默认处理其他 user-service 的需要认证的接口
    location /api/v1/ {
        # 对于 OPTIONS 请求，直接通过（用于 CORS 预检）
        if ($request_method = OPTIONS) {
            add_header Access-Control-Allow-Origin "*" always;
            add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Allow-Credentials "true" always;
            return 204;
        }
        
    auth_request /_auth;
    auth_request_set $auth_user_id $upstream_http_x_user_id;
    auth_request_set $auth_username $upstream_http_x_username;
    proxy_set_header X-User-ID $auth_user_id;
    proxy_set_header X-User-Name $auth_username;

        proxy_pass http://user_service;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }

    location / {
        return 200 'Welcome to QAHub API Gateway';
    }
}
