services:
  # API Gateway
  nginx:
    build:
      context: ./nginx
    container_name: qahub-nginx-gateway
    restart: always
    ports:
      - "8080:80" # 外部通过8080访问，Nginx容器内部监听80
    depends_on:
      - user-service
      - qa-service
      - search-service

  # 用户服务
  user-service:
    build:
      context: .
      dockerfile: cmd/user-service/Dockerfile
    container_name: qahub-user-service
    restart: always
    environment:
      - GIN_MODE=release
    depends_on:
      - mariadb
      - redis

  # 问答服务
  qa-service:
    build:
      context: .
      dockerfile: cmd/qa-service/Dockerfile
    container_name: qahub-qa-service
    restart: always
    environment:
      - GIN_MODE=release
    depends_on:
      - mariadb

  # 搜索服务
  search-service:
    build:
      context: .
      dockerfile: cmd/search-service/Dockerfile
    container_name: qahub-search-service
    restart: always
    environment:
      - GIN_MODE=release
    depends_on:
      kafka:
        condition: service_started
      elasticsearch:
        condition: service_healthy

  # MariaDB 服务
  mariadb:
    image: mariadb:12.0.2
    container_name: qahub-mariadb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 12345678 # 请务必修改为强密码
      MYSQL_DATABASE: qahub # 项目使用的数据库名
      MYSQL_USER: qahub_user # 为项目创建一个专用用户
      MYSQL_PASSWORD: 12345678
    ports:
      - "3307:3306" # 将容器的3306端口映射到主机的3307端口
    volumes:
      - mariadb_data:/var/lib/mysql # 将数据库文件持久化到名为 mariadb_data 的数据卷中
    healthcheck:
      test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost", "-u", "root", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 20s
      timeout: 10s
      retries: 10

  # Redis 服务
  redis:
    image: redis:7.0-alpine
    container_name: qahub-redis
    restart: always
    ports:
      - "6380:6379" # 将容器的6379端口映射到主机的6380端口
    volumes:
      - redis_data:/data # 将 Redis 数据持久化到名为 redis_data 的数据卷中
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka 服务 
  kafka:
    image: bitnami/kafka:latest
    container_name: qahub-kafka
    restart: always
    ports:
      - "9092:9092"   # 内部通信端口
      - "29092:29092" # 外部通信端口
    environment:
      # Kafka KRaft 模式配置
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes

      # --- 修正后的监听器配置 ---
      # 定义两个监听器：INTERNAL 用于容器间通信，EXTERNAL 用于从主机访问
      - KAFKA_CFG_LISTENERS=INTERNAL://:9092,EXTERNAL://:29092,CONTROLLER://:9093
      # 向客户端宣告正确的地址
      - KAFKA_CFG_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      # 定义监听器使用的安全协议
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
  
  # Elasticsearch 服务
  elasticsearch:
    image: elasticsearch:8.11.1
    container_name: qahub-elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # 开发环境禁用安全特性
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # 限制内存使用
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 10s
      timeout: 5s
      retries: 10

volumes:
  mariadb_data:
  redis_data:
  es_data:
