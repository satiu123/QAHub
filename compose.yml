services:
  # API Gateway
  nginx:
    build:
      context: ./nginx
    container_name: qahub-nginx-gateway
    restart: always
    ports:
      - "8080:80" # 外部通过8080访问，Nginx容器内部监听80
    depends_on:
      - user-service
      - qa-service
      - search-service

  # 数据库迁移服务 (新添加)
  db-migrator:
    image: migrate/migrate
    container_name: qahub-db-migrator
    # 将迁移脚本挂载到容器中
    volumes:
      - ./scripts/migrations/all:/migrations
    # 启动命令：执行向上迁移
    # 注意：数据库连接字符串使用了服务名 `mariadb`
    # -verbose 参数可以打印详细日志
    command: ["-path", "/migrations", "-database", "mysql://qahub_user:12345678@tcp(mariadb:3306)/qahub?charset=utf8mb4&parseTime=True&loc=Local", "up"]
    # 依赖 mariadb 服务，等待其健康检查通过后再启动
    depends_on:
      mariadb:
        condition: service_healthy
    restart: on-failure # 如果迁移失败，可以尝试重启

  # 用户服务
  user-service:
    build:
      context: .
      dockerfile: cmd/user-service/Dockerfile
    container_name: qahub-user-service
    restart: always
    environment:
      - GIN_MODE=release
    depends_on:
      db-migrator:
        condition: service_completed_successfully
      redis:
        condition: service_healthy

  # 问答服务
  qa-service:
    build:
      context: .
      dockerfile: cmd/qa-service/Dockerfile
    container_name: qahub-qa-service
    restart: always
    environment:
      - GIN_MODE=release
    depends_on:
      # 修改：不再直接依赖 mariadb，而是依赖 db-migrator 的成功退出
      db-migrator:
        condition: service_completed_successfully
      kafka:
        condition: service_started

  # 搜索服务
  search-service:
    build:
      context: .
      dockerfile: cmd/search-service/Dockerfile
    container_name: qahub-search-service
    restart: always
    environment:
      - GIN_MODE=release
    depends_on:
      kafka:
        condition: service_started
      elasticsearch:
        condition: service_healthy
  # 通知服务
  notification-service:
    build:
      context: .
      dockerfile: cmd/notification-service/Dockerfile
    container_name: qahub-notification-service
    restart: always
    environment:
      - GIN_MODE=release
    depends_on:
      kafka:
        condition: service_started
      mongodb:
        condition: service_healthy
  # MariaDB 服务
  mariadb:
    image: mariadb:12.0.2
    container_name: qahub-mariadb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 12345678 # 请务必修改为强密码
      MYSQL_DATABASE: qahub # 项目使用的数据库名
      MYSQL_USER: qahub_user # 为项目创建一个专用用户
      MYSQL_PASSWORD: 12345678
    ports:
      - "3307:3306" # 将容器的3306端口映射到主机的3307端口
    volumes:
      - mariadb_data:/var/lib/mysql # 将数据库文件持久化到名为 mariadb_data 的数据卷中
    healthcheck:
      test: ["CMD-SHELL", "mariadb-admin ping -h localhost -u root -p${MYSQL_ROOT_PASSWORD}"]
      interval: 10s     # 减少检查间隔从20s到10s
      timeout: 5s       # 减少超时时间从10s到5s  
      retries: 5        # 减少重试次数从10到5
      start_period: 30s # 给容器30秒的启动时间，在此期间健康检查失败不计入重试次数

  # Redis 服务
  redis:
    image: redis:7.0-alpine
    container_name: qahub-redis
    restart: always
    ports:
      - "6380:6379" # 将容器的6379端口映射到主机的6380端口
    volumes:
      - redis_data:/data # 将 Redis 数据持久化到名为 redis_data 的数据卷中
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka 服务 
  kafka:
    image: apache/kafka:latest # 建议：固定版本号，避免 latest 带来的不确定性
    container_name: qahub-kafka
    restart: always
    ports:
      - "9092:9092"   # 内部通信端口
      - "29092:29092" # 外部通信端口
    environment:
      # ----------- KRaft 模式核心配置 -----------
      - KAFKA_NODE_ID=1
      - KAFKA_PROCESS_ROLES=broker,controller
      - KAFKA_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      # 【关键修复】提供一个唯一的 Cluster ID，用于首次启动时格式化存储
      - KAFKA_CLUSTER_ID=5L6g3nShT-eMCtK--X86sw

      # ----------- 监听器配置 -----------
      # 定义监听器：INTERNAL 用于容器间通信，EXTERNAL 用于从主机访问，CONTROLLER 用于 KRaft 内部通信
      - KAFKA_LISTENERS=INTERNAL://:9092,EXTERNAL://:29092,CONTROLLER://:9093
      # 向客户端宣告正确的访问地址
      - KAFKA_ADVERTISED_LISTENERS=INTERNAL://kafka:9092,EXTERNAL://localhost:29092
      # 定义监听器使用的安全协议
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      # 指定broker间通信使用的监听器
      - KAFKA_INTER_BROKER_LISTENER_NAME=INTERNAL
      # KRaft 控制器监听器
      - KAFKA_CONTROLLER_LISTENER_NAMES=CONTROLLER
      
      # 指定日志目录在容器内的位置，与下方 volumes 挂载点对应
      - KAFKA_LOG_DIRS=/var/kafka-logs 
      # 限制JVM堆内存，防止占用过多宿主机内存
      - KAFKA_HEAP_OPTS=-Xms512m -Xmx512m
    volumes:
      - kafka_data:/var/kafka-logs
    user: "0:0"  # 使用root权限来避免权限问题

  # Elasticsearch 服务
  elasticsearch:
    image: elasticsearch:8.11.1
    container_name: qahub-elasticsearch
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false # 开发环境禁用安全特性
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m" # 限制内存使用
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - es_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200/_cluster/health | grep -vq '\"status\":\"red\"'"]
      interval: 10s
      timeout: 5s
      retries: 5        # 减少重试次数从10到5
      start_period: 60s # Elasticsearch启动较慢，给它60秒启动时间

  # MongoDB 服务 (为通知服务准备)
  mongodb:
    image: mongo:7.0
    container_name: qahub-mongodb
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: qahub_admin
      MONGO_INITDB_ROOT_PASSWORD: 12345678 # 请务必修改为强密码
    ports:
      - "27018:27017" # 映射到主机的 27018 端口
    volumes:
      - mongo_data:/data/db # 持久化数据
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.runCommand({ ping: 1 })"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

volumes:
  mariadb_data:
  redis_data:
  es_data:
  kafka_data:
  mongo_data:
