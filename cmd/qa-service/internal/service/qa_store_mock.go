// Code generated by MockGen. DO NOT EDIT.
// Source: ../store/qa_store.go
//
// Generated by this command:
//
//	mockgen -source=../store/qa_store.go -destination=qa_store_mock.go -package=service
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	sql "database/sql"
	model "qahub/qa-service/internal/model"
	store "qahub/qa-service/internal/store"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockQAStore is a mock of QAStore interface.
type MockQAStore struct {
	ctrl     *gomock.Controller
	recorder *MockQAStoreMockRecorder
	isgomock struct{}
}

// MockQAStoreMockRecorder is the mock recorder for MockQAStore.
type MockQAStoreMockRecorder struct {
	mock *MockQAStore
}

// NewMockQAStore creates a new mock instance.
func NewMockQAStore(ctrl *gomock.Controller) *MockQAStore {
	mock := &MockQAStore{ctrl: ctrl}
	mock.recorder = &MockQAStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQAStore) EXPECT() *MockQAStoreMockRecorder {
	return m.recorder
}

// CountAnswersByQuestionID mocks base method.
func (m *MockQAStore) CountAnswersByQuestionID(ctx context.Context, questionID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountAnswersByQuestionID", ctx, questionID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountAnswersByQuestionID indicates an expected call of CountAnswersByQuestionID.
func (mr *MockQAStoreMockRecorder) CountAnswersByQuestionID(ctx, questionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountAnswersByQuestionID", reflect.TypeOf((*MockQAStore)(nil).CountAnswersByQuestionID), ctx, questionID)
}

// CountCommentsByAnswerID mocks base method.
func (m *MockQAStore) CountCommentsByAnswerID(ctx context.Context, answerID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountCommentsByAnswerID", ctx, answerID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountCommentsByAnswerID indicates an expected call of CountCommentsByAnswerID.
func (mr *MockQAStoreMockRecorder) CountCommentsByAnswerID(ctx, answerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountCommentsByAnswerID", reflect.TypeOf((*MockQAStore)(nil).CountCommentsByAnswerID), ctx, answerID)
}

// CountQuestions mocks base method.
func (m *MockQAStore) CountQuestions(ctx context.Context) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountQuestions", ctx)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountQuestions indicates an expected call of CountQuestions.
func (mr *MockQAStoreMockRecorder) CountQuestions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountQuestions", reflect.TypeOf((*MockQAStore)(nil).CountQuestions), ctx)
}

// CountVotesByAnswerID mocks base method.
func (m *MockQAStore) CountVotesByAnswerID(ctx context.Context, answerID int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountVotesByAnswerID", ctx, answerID)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountVotesByAnswerID indicates an expected call of CountVotesByAnswerID.
func (mr *MockQAStoreMockRecorder) CountVotesByAnswerID(ctx, answerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountVotesByAnswerID", reflect.TypeOf((*MockQAStore)(nil).CountVotesByAnswerID), ctx, answerID)
}

// CreateAnswer mocks base method.
func (m *MockQAStore) CreateAnswer(ctx context.Context, answer *model.Answer) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnswer", ctx, answer)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAnswer indicates an expected call of CreateAnswer.
func (mr *MockQAStoreMockRecorder) CreateAnswer(ctx, answer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnswer", reflect.TypeOf((*MockQAStore)(nil).CreateAnswer), ctx, answer)
}

// CreateAnswerVote mocks base method.
func (m *MockQAStore) CreateAnswerVote(ctx context.Context, answerID, userID int64, isUpvote bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAnswerVote", ctx, answerID, userID, isUpvote)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAnswerVote indicates an expected call of CreateAnswerVote.
func (mr *MockQAStoreMockRecorder) CreateAnswerVote(ctx, answerID, userID, isUpvote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAnswerVote", reflect.TypeOf((*MockQAStore)(nil).CreateAnswerVote), ctx, answerID, userID, isUpvote)
}

// CreateComment mocks base method.
func (m *MockQAStore) CreateComment(ctx context.Context, comment *model.Comment) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, comment)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockQAStoreMockRecorder) CreateComment(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockQAStore)(nil).CreateComment), ctx, comment)
}

// CreateQuestion mocks base method.
func (m *MockQAStore) CreateQuestion(ctx context.Context, question *model.Question) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateQuestion", ctx, question)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateQuestion indicates an expected call of CreateQuestion.
func (mr *MockQAStoreMockRecorder) CreateQuestion(ctx, question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateQuestion", reflect.TypeOf((*MockQAStore)(nil).CreateQuestion), ctx, question)
}

// DecrementAnswerUpvoteCount mocks base method.
func (m *MockQAStore) DecrementAnswerUpvoteCount(ctx context.Context, answerID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementAnswerUpvoteCount", ctx, answerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementAnswerUpvoteCount indicates an expected call of DecrementAnswerUpvoteCount.
func (mr *MockQAStoreMockRecorder) DecrementAnswerUpvoteCount(ctx, answerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementAnswerUpvoteCount", reflect.TypeOf((*MockQAStore)(nil).DecrementAnswerUpvoteCount), ctx, answerID)
}

// DeleteAnswer mocks base method.
func (m *MockQAStore) DeleteAnswer(ctx context.Context, answerID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnswer", ctx, answerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnswer indicates an expected call of DeleteAnswer.
func (mr *MockQAStoreMockRecorder) DeleteAnswer(ctx, answerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnswer", reflect.TypeOf((*MockQAStore)(nil).DeleteAnswer), ctx, answerID)
}

// DeleteAnswerVote mocks base method.
func (m *MockQAStore) DeleteAnswerVote(ctx context.Context, answerID, userID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAnswerVote", ctx, answerID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAnswerVote indicates an expected call of DeleteAnswerVote.
func (mr *MockQAStoreMockRecorder) DeleteAnswerVote(ctx, answerID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAnswerVote", reflect.TypeOf((*MockQAStore)(nil).DeleteAnswerVote), ctx, answerID, userID)
}

// DeleteComment mocks base method.
func (m *MockQAStore) DeleteComment(ctx context.Context, commentID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", ctx, commentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockQAStoreMockRecorder) DeleteComment(ctx, commentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockQAStore)(nil).DeleteComment), ctx, commentID)
}

// DeleteQuestion mocks base method.
func (m *MockQAStore) DeleteQuestion(ctx context.Context, questionID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteQuestion", ctx, questionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteQuestion indicates an expected call of DeleteQuestion.
func (mr *MockQAStoreMockRecorder) DeleteQuestion(ctx, questionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteQuestion", reflect.TypeOf((*MockQAStore)(nil).DeleteQuestion), ctx, questionID)
}

// ExecTx mocks base method.
func (m *MockQAStore) ExecTx(ctx context.Context, fn func(store.QAStore) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecTx", ctx, fn)
	ret0, _ := ret[0].(error)
	return ret0
}

// ExecTx indicates an expected call of ExecTx.
func (mr *MockQAStoreMockRecorder) ExecTx(ctx, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecTx", reflect.TypeOf((*MockQAStore)(nil).ExecTx), ctx, fn)
}

// GetAnswerByID mocks base method.
func (m *MockQAStore) GetAnswerByID(ctx context.Context, answerID int64) (*model.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnswerByID", ctx, answerID)
	ret0, _ := ret[0].(*model.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnswerByID indicates an expected call of GetAnswerByID.
func (mr *MockQAStoreMockRecorder) GetAnswerByID(ctx, answerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswerByID", reflect.TypeOf((*MockQAStore)(nil).GetAnswerByID), ctx, answerID)
}

// GetAnswerCountByQuestionIDs mocks base method.
func (m *MockQAStore) GetAnswerCountByQuestionIDs(ctx context.Context, questionIDs []int64) (map[int64]int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAnswerCountByQuestionIDs", ctx, questionIDs)
	ret0, _ := ret[0].(map[int64]int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAnswerCountByQuestionIDs indicates an expected call of GetAnswerCountByQuestionIDs.
func (mr *MockQAStoreMockRecorder) GetAnswerCountByQuestionIDs(ctx, questionIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAnswerCountByQuestionIDs", reflect.TypeOf((*MockQAStore)(nil).GetAnswerCountByQuestionIDs), ctx, questionIDs)
}

// GetCommentByID mocks base method.
func (m *MockQAStore) GetCommentByID(ctx context.Context, commentID int64) (*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommentByID", ctx, commentID)
	ret0, _ := ret[0].(*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommentByID indicates an expected call of GetCommentByID.
func (mr *MockQAStoreMockRecorder) GetCommentByID(ctx, commentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommentByID", reflect.TypeOf((*MockQAStore)(nil).GetCommentByID), ctx, commentID)
}

// GetQuestionByID mocks base method.
func (m *MockQAStore) GetQuestionByID(ctx context.Context, questionID int64) (*model.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetQuestionByID", ctx, questionID)
	ret0, _ := ret[0].(*model.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetQuestionByID indicates an expected call of GetQuestionByID.
func (mr *MockQAStoreMockRecorder) GetQuestionByID(ctx, questionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetQuestionByID", reflect.TypeOf((*MockQAStore)(nil).GetQuestionByID), ctx, questionID)
}

// GetUserVotesForAnswers mocks base method.
func (m *MockQAStore) GetUserVotesForAnswers(ctx context.Context, userID int64, answerIDs []int64) (map[int64]bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserVotesForAnswers", ctx, userID, answerIDs)
	ret0, _ := ret[0].(map[int64]bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserVotesForAnswers indicates an expected call of GetUserVotesForAnswers.
func (mr *MockQAStoreMockRecorder) GetUserVotesForAnswers(ctx, userID, answerIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserVotesForAnswers", reflect.TypeOf((*MockQAStore)(nil).GetUserVotesForAnswers), ctx, userID, answerIDs)
}

// GetUsernamesByIDs mocks base method.
func (m *MockQAStore) GetUsernamesByIDs(ctx context.Context, userIDs []int64) (map[int64]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsernamesByIDs", ctx, userIDs)
	ret0, _ := ret[0].(map[int64]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsernamesByIDs indicates an expected call of GetUsernamesByIDs.
func (mr *MockQAStoreMockRecorder) GetUsernamesByIDs(ctx, userIDs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsernamesByIDs", reflect.TypeOf((*MockQAStore)(nil).GetUsernamesByIDs), ctx, userIDs)
}

// IncrementAnswerUpvoteCount mocks base method.
func (m *MockQAStore) IncrementAnswerUpvoteCount(ctx context.Context, answerID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementAnswerUpvoteCount", ctx, answerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementAnswerUpvoteCount indicates an expected call of IncrementAnswerUpvoteCount.
func (mr *MockQAStoreMockRecorder) IncrementAnswerUpvoteCount(ctx, answerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementAnswerUpvoteCount", reflect.TypeOf((*MockQAStore)(nil).IncrementAnswerUpvoteCount), ctx, answerID)
}

// ListAnswersByQuestionID mocks base method.
func (m *MockQAStore) ListAnswersByQuestionID(ctx context.Context, questionID, offset int64, limit int32) ([]*model.Answer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAnswersByQuestionID", ctx, questionID, offset, limit)
	ret0, _ := ret[0].([]*model.Answer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAnswersByQuestionID indicates an expected call of ListAnswersByQuestionID.
func (mr *MockQAStoreMockRecorder) ListAnswersByQuestionID(ctx, questionID, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAnswersByQuestionID", reflect.TypeOf((*MockQAStore)(nil).ListAnswersByQuestionID), ctx, questionID, offset, limit)
}

// ListCommentsByAnswerID mocks base method.
func (m *MockQAStore) ListCommentsByAnswerID(ctx context.Context, answerID, offset int64, limit int32) ([]*model.Comment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommentsByAnswerID", ctx, answerID, offset, limit)
	ret0, _ := ret[0].([]*model.Comment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommentsByAnswerID indicates an expected call of ListCommentsByAnswerID.
func (mr *MockQAStoreMockRecorder) ListCommentsByAnswerID(ctx, answerID, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommentsByAnswerID", reflect.TypeOf((*MockQAStore)(nil).ListCommentsByAnswerID), ctx, answerID, offset, limit)
}

// ListQuestions mocks base method.
func (m *MockQAStore) ListQuestions(ctx context.Context, offset int64, limit int32) ([]*model.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuestions", ctx, offset, limit)
	ret0, _ := ret[0].([]*model.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuestions indicates an expected call of ListQuestions.
func (mr *MockQAStoreMockRecorder) ListQuestions(ctx, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuestions", reflect.TypeOf((*MockQAStore)(nil).ListQuestions), ctx, offset, limit)
}

// ListQuestionsByUserID mocks base method.
func (m *MockQAStore) ListQuestionsByUserID(ctx context.Context, userID, offset int64, limit int32) ([]*model.Question, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListQuestionsByUserID", ctx, userID, offset, limit)
	ret0, _ := ret[0].([]*model.Question)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListQuestionsByUserID indicates an expected call of ListQuestionsByUserID.
func (mr *MockQAStoreMockRecorder) ListQuestionsByUserID(ctx, userID, offset, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListQuestionsByUserID", reflect.TypeOf((*MockQAStore)(nil).ListQuestionsByUserID), ctx, userID, offset, limit)
}

// UpdateAnswer mocks base method.
func (m *MockQAStore) UpdateAnswer(ctx context.Context, answer *model.Answer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAnswer", ctx, answer)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAnswer indicates an expected call of UpdateAnswer.
func (mr *MockQAStoreMockRecorder) UpdateAnswer(ctx, answer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAnswer", reflect.TypeOf((*MockQAStore)(nil).UpdateAnswer), ctx, answer)
}

// UpdateComment mocks base method.
func (m *MockQAStore) UpdateComment(ctx context.Context, comment *model.Comment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", ctx, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockQAStoreMockRecorder) UpdateComment(ctx, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockQAStore)(nil).UpdateComment), ctx, comment)
}

// UpdateQuestion mocks base method.
func (m *MockQAStore) UpdateQuestion(ctx context.Context, question *model.Question) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateQuestion", ctx, question)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateQuestion indicates an expected call of UpdateQuestion.
func (mr *MockQAStoreMockRecorder) UpdateQuestion(ctx, question any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateQuestion", reflect.TypeOf((*MockQAStore)(nil).UpdateQuestion), ctx, question)
}

// Mockquerier is a mock of querier interface.
type Mockquerier struct {
	ctrl     *gomock.Controller
	recorder *MockquerierMockRecorder
	isgomock struct{}
}

// MockquerierMockRecorder is the mock recorder for Mockquerier.
type MockquerierMockRecorder struct {
	mock *Mockquerier
}

// NewMockquerier creates a new mock instance.
func NewMockquerier(ctrl *gomock.Controller) *Mockquerier {
	mock := &Mockquerier{ctrl: ctrl}
	mock.recorder = &MockquerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockquerier) EXPECT() *MockquerierMockRecorder {
	return m.recorder
}

// ExecContext mocks base method.
func (m *Mockquerier) ExecContext(ctx context.Context, query string, args ...any) (sql.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ExecContext", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContext indicates an expected call of ExecContext.
func (mr *MockquerierMockRecorder) ExecContext(ctx, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContext", reflect.TypeOf((*Mockquerier)(nil).ExecContext), varargs...)
}

// GetContext mocks base method.
func (m *Mockquerier) GetContext(ctx context.Context, dest any, query string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// GetContext indicates an expected call of GetContext.
func (mr *MockquerierMockRecorder) GetContext(ctx, dest, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*Mockquerier)(nil).GetContext), varargs...)
}

// SelectContext mocks base method.
func (m *Mockquerier) SelectContext(ctx context.Context, dest any, query string, args ...any) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, dest, query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SelectContext", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SelectContext indicates an expected call of SelectContext.
func (mr *MockquerierMockRecorder) SelectContext(ctx, dest, query any, args ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, dest, query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SelectContext", reflect.TypeOf((*Mockquerier)(nil).SelectContext), varargs...)
}
